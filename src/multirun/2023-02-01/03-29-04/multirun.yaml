hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: null
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - scheduler.type=sigmoid,cosine,linear,quadratic
    - model=unet
    - training.loss=huber,l1,l2
  job:
    name: experiment
    chdir: false
    override_dirname: model=unet,scheduler.type=sigmoid,cosine,linear,quadratic,training.loss=huber,l1,l2
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.2.0
    version_base: '1.1'
    cwd: /work/lukemk/xingjian/DEQ_Diffusion/DEQ_Diffusion/src
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /work/lukemk/xingjian/DEQ_Diffusion/DEQ_Diffusion/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      model: unet
      dataset: fasion_mnist
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
device: cuda
seed: null
optimizer:
  type: Adam
  _target_: torch.optim.Adam
  lr: 0.001
training:
  epochs: 20
  save_every: 1
  eval_every: 1
  visualize_every: 1
  loss: huber
scheduler:
  type: cosine
  timesteps: 200
wandb: null
dataset:
  name: FasionMNIST
  img_size: 28
  n_channels: 1
  batch_size: 128
model:
  type: UNet
  dim_mults:
  - 1
  - 2
  - 4
  use_convnext: true
  convnext_mult: 2
  with_time_emb: true
  init_dim: None
  out_dim: None
  resnet_block_groups: 8
